use thread;

// for cycle executes it's children step by step
for i in 5 {
    // simulate an http request
    thread.sleep(1000);
    println(i);
}

println();

// spin cycle works almost like for
// but it executes it's children concurrently
// the execution order my be different for every execution
// this syntax is good for handling multiple blocking operation without
// worrying about threads, spawners and portals.
spin i in 100 {
    // simulate an http request
    thread.sleep(1000);
    println(i);

    if i == 5 {
        // if an error occures, the execution may not stops immediatly
        // and runs the other spins
        // after the execution of all spin routines, the error will be displayed, if any, and the execution will stop.
        fail("unknown error");
    }
}
// ATTENTION: Spin loops are not meant for using it every time. It's just a helper to boost productivity without making your own thread spawners.
// In some cases it's a good productivity booster, maybe for populating a list with http response codes.
// But keep in mind, it's error handling mechanism isn't always the best for safer operations.