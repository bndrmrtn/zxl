// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: internal/extensions/extension.proto

package extensions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExtensionManager_GetVariables_FullMethodName   = "/extensions.ExtensionManager/GetVariables"
	ExtensionManager_GetMethodNames_FullMethodName = "/extensions.ExtensionManager/GetMethodNames"
	ExtensionManager_ExecuteMethod_FullMethodName  = "/extensions.ExtensionManager/ExecuteMethod"
)

// ExtensionManagerClient is the client API for ExtensionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtensionManagerClient interface {
	GetVariables(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VariableList, error)
	GetMethodNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MethodNameList, error)
	ExecuteMethod(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type extensionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewExtensionManagerClient(cc grpc.ClientConnInterface) ExtensionManagerClient {
	return &extensionManagerClient{cc}
}

func (c *extensionManagerClient) GetVariables(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VariableList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariableList)
	err := c.cc.Invoke(ctx, ExtensionManager_GetVariables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionManagerClient) GetMethodNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MethodNameList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MethodNameList)
	err := c.cc.Invoke(ctx, ExtensionManager_GetMethodNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extensionManagerClient) ExecuteMethod(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, ExtensionManager_ExecuteMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtensionManagerServer is the server API for ExtensionManager service.
// All implementations must embed UnimplementedExtensionManagerServer
// for forward compatibility.
type ExtensionManagerServer interface {
	GetVariables(context.Context, *Empty) (*VariableList, error)
	GetMethodNames(context.Context, *Empty) (*MethodNameList, error)
	ExecuteMethod(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	mustEmbedUnimplementedExtensionManagerServer()
}

// UnimplementedExtensionManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExtensionManagerServer struct{}

func (UnimplementedExtensionManagerServer) GetVariables(context.Context, *Empty) (*VariableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariables not implemented")
}
func (UnimplementedExtensionManagerServer) GetMethodNames(context.Context, *Empty) (*MethodNameList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMethodNames not implemented")
}
func (UnimplementedExtensionManagerServer) ExecuteMethod(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteMethod not implemented")
}
func (UnimplementedExtensionManagerServer) mustEmbedUnimplementedExtensionManagerServer() {}
func (UnimplementedExtensionManagerServer) testEmbeddedByValue()                          {}

// UnsafeExtensionManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtensionManagerServer will
// result in compilation errors.
type UnsafeExtensionManagerServer interface {
	mustEmbedUnimplementedExtensionManagerServer()
}

func RegisterExtensionManagerServer(s grpc.ServiceRegistrar, srv ExtensionManagerServer) {
	// If the following call pancis, it indicates UnimplementedExtensionManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExtensionManager_ServiceDesc, srv)
}

func _ExtensionManager_GetVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionManagerServer).GetVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionManager_GetVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionManagerServer).GetVariables(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionManager_GetMethodNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionManagerServer).GetMethodNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionManager_GetMethodNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionManagerServer).GetMethodNames(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtensionManager_ExecuteMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtensionManagerServer).ExecuteMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExtensionManager_ExecuteMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtensionManagerServer).ExecuteMethod(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtensionManager_ServiceDesc is the grpc.ServiceDesc for ExtensionManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtensionManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "extensions.ExtensionManager",
	HandlerType: (*ExtensionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVariables",
			Handler:    _ExtensionManager_GetVariables_Handler,
		},
		{
			MethodName: "GetMethodNames",
			Handler:    _ExtensionManager_GetMethodNames_Handler,
		},
		{
			MethodName: "ExecuteMethod",
			Handler:    _ExtensionManager_ExecuteMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/extensions/extension.proto",
}
